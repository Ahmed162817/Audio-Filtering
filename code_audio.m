clc
[DataIn,fs]=audioread('audio.wav');
%sound(DataIn,fs);
N1=length(DataIn);
F_DataIn=fft(DataIn,N1);
f1=[0:N1-1]*fs/N1;
figure 
plot(f1,abs(F_DataIn)/N1);
title('Fast fourier transform of audio signal',...
    'interpreter','tex',...
    'FontSize',16,...
    'FontName','Times')
f2=[-N1/2:N1/2-1]*fs/N1;
figure 
plot(f2,abs(fftshift(F_DataIn))/N1);
title('shift Fast fourier transform of audio signal',...
    'interpreter','tex',...
    'FontSize',16,...
    'FontName','Times')
DataOut=filter(filter_design,DataIn);
%sound(DataOut,fs);
audiowrite('filtered.wav',DataOut,fs);
N2=length(DataOut);
F_DataOut=fft(DataOut,N2);
f3=[0:N2-1]*fs/N2;
figure 
plot(f3,abs(F_DataOut)/N2);
title('Fast fourier transform of Filtered audio signal',...
    'interpreter','tex',...
    'FontSize',16,...
    'FontName','Times')
f4=[-N2/2:N2/2-1]*fs/N2;
figure 
plot(f4,abs(fftshift(F_DataOut))/N2);
title('shift Fast fourier transform of Filtered audio signal',...
    'interpreter','tex',...
    'FontSize',16,...
    'FontName','Times')
[H,f]=freqz(filter_design,N2,fs);
figure
plot(f,abs(H));
title('frequency response of the filtered audio',...
    'interpreter','tex',...
    'FontSize',16,...
    'FontName','Times')
[h,t]=impz(filter_design);
figure
plot(t,h);
title('impulse response of the filtered audio',...
    'interpreter','tex',...
    'FontSize',16,...
    'FontName','Times')
fss=2*fs;
DataOut_fast=DataOut;
%sound(DataOut_fast,fss);
audiowrite('fast_filtered.wav',DataOut_fast,fss);
N3=length(DataOut_fast);
F_DataOut_fast=fft(DataOut_fast,N3);
f5=[0:N3-1]*fss/N3;
figure 
plot(f5,abs(F_DataOut_fast)/N3);
title('Fast fourier transform of double speed Filtered audio signal',...
    'interpreter','tex',...
    'FontSize',16,...
    'FontName','Times')
f6=[-N3/2:N3/2-1]*fss/N3;
figure 
plot(f6,abs(fftshift(F_DataOut_fast))/N3);
title('shift Fast fourier transform of double speed Filtered audio signal',...
    'interpreter','tex',...
    'FontSize',16,...
    'FontName','Times')

function Hd = filter_design
%FILTER_DESIGN Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.10 and Signal Processing Toolbox 8.6.
% Generated on: 30-Dec-2022 18:20:14

% Butterworth Bandstop filter designed using FDESIGN.BANDSTOP.

% All frequency values are in Hz.
Fs = 48000;  % Sampling Frequency

N   = 10;    % Order
Fc1 = 2800;  % First Cutoff Frequency
Fc2 = 3200;  % Second Cutoff Frequency

% Construct an FDESIGN object and call its BUTTER method.
h  = fdesign.bandstop('N,F3dB1,F3dB2', N, Fc1, Fc2, Fs);
Hd = design(h, 'butter');

% [EOF]
end





